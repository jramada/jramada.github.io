{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/the-journey-to-build-my-website","result":{"data":{"markdownRemark":{"id":"6e3ecc7b-9654-57f3-bbea-36081cd3a033","html":"<p>Creating a personal blog is something that I have been thinking about for some time.\nThis is where my journey begins: on the requirements of having a personal website in modern times.</p>\n<p>It can’t be easier to have a personal webpage these days. However, there can be some fallacies regarding content ownership, privacy, security and availability. My solution to this is simple, do a list of non-withdrawable requirements:</p>\n<ul>\n<li><strong>Preserve Ownership of Content</strong> - Thousands of people work hard every day to create content on “free” platforms which quietly take copyrights or get royalty free usage of the content. This is a matter I see very often discarded across the web. It is important to raise awareness to this problem and to always read the terms and conditions when dealing with “free” platforms.</li>\n<li><strong>Open Source</strong> - I don’t want any paid or subscription anchors.</li>\n<li><strong>Simple Architecture</strong> - A set of static webpages is more than enough. It is overkilling to pay for a backend server.</li>\n<li><strong>Fast Portability</strong> - Disaster happens everywhere, every time, and in seconds. I want to focus on putting my thoughts  on (digital) paper, not spending hours migrating my page.</li>\n<li><strong>Minimalist</strong> - This also reflects my way of thinking: the main focus should be on the reading material. I don’t need, or want, any fancy design or functionality. Any perceived need will occur naturally. </li>\n<li><strong>Separate Content</strong> - My content should be as separate as possible from the technology. New requirements may arise and make my current website unviable. However, content must be easily ported.</li>\n</ul>\n<p>My searching to fulfill these requirements led me to a interesting technology match. Gatsby is an opensource static site generator built on top of React and GraphQL. What sold me was the fast learning curve, great documentation and a dead simple blog website template which I used as backbone.\nThe easy to use plugin functionalities made possible to create all my pages and blog posts in a separated content way by simply adding folders with markdown files.</p>\n<p>Since I never worked with GraphQL I thought of a practical implementation of a “pinned posts” section to get the hang of it. The best way to accomplish this according to my view of “separated content” was to add a boolean attribute <em>pinned</em> to markdown file metadata and let graphQL do its magic.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"> <span class=\"token hr punctuation\">---</span>\n title: The title of a post\n (...)\n pinned: true\n (..)\n description: The description of a post\n <span class=\"token hr punctuation\">---</span></code></pre></div>\n<p>The query follows next:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token attr-name\">allPinnedPosts</span><span class=\"token punctuation\">:</span> allMarkdownRemark<span class=\"token punctuation\">(</span>\n      <span class=\"token attr-name\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n      <span class=\"token attr-name\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">frontmatter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"post\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">draft</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">ne</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">pinned</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">order</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">DESC</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>frontmatter___date<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      edges <span class=\"token punctuation\">{</span>\n        node <span class=\"token punctuation\">{</span>\n          fields <span class=\"token punctuation\">{</span>\n            slug\n            categorySlug\n          <span class=\"token punctuation\">}</span>\n          frontmatter <span class=\"token punctuation\">{</span>\n            title\n            date\n            category\n            description\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, I implemented the retrieval logic to get “the latest 5 posts which are not a draft and are pinned”.\nWith the query retrieving the results, I created a simple component to list those posts and got it rendered at the sidebar. </p>\n<p>Exactly want I wanted: low implementation time to focus on writing content. You can see the result inside the sidebar on the main page. </p>\n<p>This was my first post. Now I just need to keep writing and hopefully make my contributions a habit.\nI hope you enjoyed reading the same way I enjoyed writing.</p>","fields":{"slug":"/posts/the-journey-to-build-my-website","tagSlugs":["/tag/engineering/","/tag/development/","/tag/projects/"],"readingTime":{"text":"3 min read"}},"frontmatter":{"date":"2021-04-17T22:40:32.169Z","description":"The journey to build my own webpage","tags":["Engineering","Development","Projects"],"title":"6 Requirements your personal website must fulfill","category":"engineering","socialImage":{"publicURL":"/static/b3e5e61f7fb8888ba76b502242e27bd0/image-0.jpg"}}}},"pageContext":{"slug":"/posts/the-journey-to-build-my-website"}},"staticQueryHashes":["251939775","401334301","667388626","730122467"]}